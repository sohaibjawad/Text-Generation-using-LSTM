# -*- coding: utf-8 -*-
"""Project - Text Generation Using LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HGTqW6MCFdzZgLVIaHAc02KGd6VLNoiO

# NLP Project - Text Generation Using LSTM
### Group Members:
<ul>
  <li>Hams Ansari (16P-6056)</li>
  <li>Sohaib Jawad (16P-6012)</li>
  <li>Mustafa Hassan (16P-6004)</li>
</ul>
"""

from google.colab import drive
drive.mount('/content/drive')

import re
from string import punctuation as punc
from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS

#This function reads files
def read_file(filepath):

    with open(filepath) as f:
        str_text = f.read()

    return str_text

X = read_file('drive/My Drive/Colab Notebooks/moby_dick_four_chapters.txt')

#Normalizing Corpus
X = X.lower()

"""### Tokenize and Clean Text"""

X = X.split('\n')

data = []

#This function tokenizes documents in corpus
def convert_to_list(X,data):
    for row in range(0,len(X)):
        data.insert(len(data),X[row].split(' '))
    return data

convert_to_list(X,data)

def remove_punctuations(data):
    for ch in punc:
        for i in range(0,len(data)):
            for j in data[i]:
                if ch == j:
                    data[i].remove(ch)

    for i in range(0,len(data)):
        for j in data[i]:
            if j == '':
                #print(1)
                data[i].remove(j)

    return data

#removing punctuations from tokenized list
data = remove_punctuations(data)

print(data)

#List containing tokens without punctuations
tokens = []

for i in range(0,len(data)):
    for j in range(0,len(data[i])):
        tokens.append(data[i][j])

print(tokens)

print(len(tokens))

# organize into sequences of tokens
train_len = 25+1 # 25 training words , then one target word

# Empty list of sequences
text_sequences = []

for i in range(train_len, len(tokens)):

    # Grab train_len# amount of characters
    seq = tokens[i-train_len:i]

    # Add to list of sequences
    text_sequences.append(seq)

' '.join(text_sequences[0])

' '.join(text_sequences[1])

print(len(text_sequences))

import keras
from keras.preprocessing.text import Tokenizer

# integer encode sequences of words
tokenizer = Tokenizer()
tokenizer.fit_on_texts(text_sequences)
sequences = tokenizer.texts_to_sequences(text_sequences)

sequences[0]

print(tokenizer.index_word)

for i in sequences[0]:
    print(f'{i} : {tokenizer.index_word[i]}')

print(tokenizer.word_counts)

vocabulary_size = len(tokenizer.word_counts)

print(vocabulary_size)

import numpy as np

sequences = np.array(sequences)

print(sequences)

import keras
from keras.models import Sequential
from keras.layers import Dense,LSTM,Embedding

def create_model(vocabulary_size, seq_len):
    model = Sequential()
    model.add(Embedding(vocabulary_size, 25, input_length=seq_len))
    model.add(LSTM(150, return_sequences=True))
    model.add(LSTM(150))
    model.add(Dense(150, activation='relu'))

    model.add(Dense(vocabulary_size, activation='softmax'))

    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

    model.summary()

    return model

"""### Train / Test Split"""

from keras.utils import to_categorical

print(sequences)

sequences[:,:-1]

sequences[:,-1]

X = sequences[:,:-1]

y = sequences[:,-1]

y = to_categorical(y, num_classes=vocabulary_size+1)

seq_len = X.shape[1]

print(seq_len)

# define model
model = create_model(vocabulary_size+1, seq_len)

"""---

----
"""



# fit model
model.fit(X, y, batch_size=64, epochs=200,verbose=1)



"""# Generating New Text"""

from random import randint
# from pickle import load
# from keras.models import load_model
from keras.preprocessing.sequence import pad_sequences

def generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):
    '''
    model : model that was trained on text data
    tokenizer : tokenizer that was fit on text data
    seq_len : length of training sequence
    seed_text : raw string text to serve as the seed
    num_gen_words : number of words to be generated by model
    '''

    # Final Output
    output_text = []

    # Intial Seed Sequence
    input_text = seed_text

    # Create num_gen_words
    for i in range(num_gen_words):

        # Take the input text string and encode it to a sequence
        encoded_text = tokenizer.texts_to_sequences([input_text])[0]

        # Pad sequences to our trained rate
        pad_encoded = pad_sequences([encoded_text], maxlen=seq_len, truncating='pre')

        # Predict Class Probabilities for each word
        pred_word_ind = model.predict_classes(pad_encoded, verbose=0)[0]

        # Grab word
        pred_word = tokenizer.index_word[pred_word_ind]

        # Update the sequence of input text (shifting one over with the new word)
        input_text += ' ' + pred_word

        output_text.append(pred_word)

    # Make it look like a sentence.
    return ' '.join(output_text)

"""### Grab a random seed sequence"""

print(text_sequences[0])

import random
random.seed(101)
random_pick = random.randint(0,len(text_sequences))

random_seed_text = text_sequences[random_pick]

print(random_seed_text)

seed_text = ' '.join(random_seed_text)

print(seed_text)

generate_text(model,tokenizer,seq_len,seed_text=seed_text,num_gen_words=26)
